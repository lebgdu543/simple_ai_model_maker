import tkinter as tk

class ChatBot:
    def __init__(self, master):
        self.master = master
        master.title("ChatBot")

        self.database = {}
        self.mots_cles = {}

        self.charger_base_de_donnees()

        self.chat_window = tk.Text(master, height=20, width=50)
        self.chat_window.grid(row=0, column=0, padx=10, pady=10)

        self.input_field = tk.Entry(master, width=50)
        self.input_field.grid(row=1, column=0, padx=10, pady=10)

        self.send_button = tk.Button(master, text="Send", command=lambda: self.handle_input(self.input_field.get()))
        self.send_button.grid(row=2, column=0, padx=10, pady=10)

    def apprendre(self, question, reponse):
        self.database[question] = reponse
        self.mots_cles[question] = set(question.split())
        self.enregistrer_base_de_donnees()

    def enregistrer_base_de_donnees(self):
        with open("base_de_donnees.txt", "w") as fichier:
            for question, reponse in self.database.items():
                fichier.write(f"{question}|{reponse}\n")

    def charger_base_de_donnees(self):
        try:
            with open("base_de_donnees.txt", "r") as fichier:
                lignes = fichier.readlines()
                for ligne in lignes:
                    parts = ligne.strip().split("|")
                    if len(parts) == 2:
                        question, reponse = parts
                        self.database[question] = reponse
                        self.mots_cles[question] = set(question.split())
                    else:
                        print(f"Ignoring line with invalid format: {ligne.strip()}")
        except FileNotFoundError:
            pass

    def repondre(self, question):
        for q, mots_cles in self.mots_cles.items():
            if all(mot in question for mot in mots_cles):
                return self.database[q]
        return "I don't yet know how to answer that question."

    def handle_input(self, question):
        reponse = self.repondre(question)
        self.chat_window.insert(tk.END, f"You: {question}\nAI: {reponse}\n\n")
        self.handle_feedback(question)

    def handle_feedback(self, question):
        self.feedback_label = tk.Label(self.master, text="AI: Did I answer correctly? (y/n)")
        self.feedback_label.grid(row=3, column=0, padx=10, pady=10)

        self.feedback_entry = tk.Entry(self.master)
        self.feedback_entry.grid(row=4, column=0, padx=10, pady=10)

        self.submit_button = tk.Button(self.master, text="Submit", command=lambda: self.handle_new_response(question))
        self.submit_button.grid(row=5, column=0, padx=10, pady=10)

    def handle_new_response(self, question):
        feedback = self.feedback_entry.get()
        self.feedback_entry.delete(0, tk.END)
        self.feedback_label.destroy()
        self.feedback_entry.destroy()
        self.submit_button.destroy()

        if feedback.lower() == "n":
            self.nouvelle_reponse_window = tk.Toplevel(self.master)
            self.nouvelle_reponse_window.title("New Response")

            self.nouvelle_reponse_label = tk.Label(self.nouvelle_reponse_window, text="AI: Okay, what should the correct answer be?")
            self.nouvelle_reponse_label.pack(padx=10, pady=10)

            self.nouvelle_reponse_entry = tk.Entry(self.nouvelle_reponse_window)
            self.nouvelle_reponse_entry.pack(padx=10, pady=10)

            self.nouvelle_reponse_button = tk.Button(self.nouvelle_reponse_window, text="Submit", command=lambda: self.handle_save_new_response(question, self.nouvelle_reponse_entry.get()))
            self.nouvelle_reponse_button.pack(padx=10, pady=10)

    def handle_save_new_response(self, question, nouvelle_reponse):
        self.nouvelle_reponse_window.destroy()
        self.apprendre(question, nouvelle_reponse)
        self.chat_window.insert(tk.END, "AI: Thanks, I've learned something new!\n\n")

if __name__ == "__main__":
    root = tk.Tk()
    chatbot = ChatBot(root)
    root.mainloop()
